# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Application,DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    admin.category:
        class: App\Admin\BlogPostAdmin
        arguments: [~, App\Entity\BlogPost, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: Workshop, label: Blog post }

    App\Command\CreateMediaCommand:
        arguments:
            - '@sonata.media.manager.media'

    sonata.media.provider.custom_image:
        class: App\Provider\CustomImageProvider
        arguments:
            - 'sonata.media.provider.custom_image'
            - '@app.filesystem.ftp'
            - '@sonata.media.cdn.server'
            - '@sonata.media.generator.default'
            - '@sonata.media.thumbnail.format'
            - [gif, jpeg, jpg, png, eps, tif, tiff]
            - [image/gif, image/x-gif, image/jpeg, image/x-jpeg, image/png, image/x-png, application/postscript, application/x-postscript, image/x-pam, image/x-ept, image/x-eps, image/tiff, image/x-tiff, image/tif, image/x-tif]
            - '@sonata.media.adapter.image.imagick'
            - '@sonata.media.metadata.proxy'
        tags:
            - { name: sonata.media.provider }
        calls:
            - [setResizer, ['@sonata.media.resizer.simple']]
            - [setTemplates, [{helper_thumbnail: 'SonataMediaBundle:Provider:thumbnail.html.twig', helper_view: 'SonataMediaBundle:Provider:view_file.html.twig'}]]

    app.ftp_adapter:
       class: Gaufrette\Adapter\Ftp
       arguments:
           - '/test'
           - '157.230.97.104'
           - {'username': 'vsftp', 'password': 'w68UAQ2B6vJShSv3', 'passive': true}

    app.filesystem.ftp:
       class: Gaufrette\Filesystem
       arguments:
           - '@app.ftp_adapter'
